// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: actions.sql

package db

import (
	"context"
	"database/sql"
)

const createtodos = `-- name: Createtodos :one
INSERT INTO todos(
  title,
  time,
  date
) VALUES (
  $1, $2, $3
)
RETURNING todo_id, user_id, title, time, date, completed
`

type CreatetodosParams struct {
	Title sql.NullString `json:"title"`
	Time  sql.NullString `json:"time"`
	Date  sql.NullString `json:"date"`
}

func (q *Queries) Createtodos(ctx context.Context, arg CreatetodosParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createtodos, arg.Title, arg.Time, arg.Date)
	var i Todo
	err := row.Scan(
		&i.TodoID,
		&i.UserID,
		&i.Title,
		&i.Time,
		&i.Date,
		&i.Completed,
	)
	return i, err
}

const createusertable = `-- name: Createusertable :one
INSERT INTO users (
  first_name,
  last_name,
  user_name,
  email,
  password
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING user_id, first_name, last_name, user_name, email, password
`

type CreateusertableParams struct {
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	UserName  sql.NullString `json:"user_name"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
}

func (q *Queries) Createusertable(ctx context.Context, arg CreateusertableParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createusertable,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const deletetodos = `-- name: Deletetodos :exec
DELETE FROM todos 
WHERE todo_id = $1
`

func (q *Queries) Deletetodos(ctx context.Context, todoID int64) error {
	_, err := q.db.ExecContext(ctx, deletetodos, todoID)
	return err
}

const deleteuser = `-- name: Deleteuser :exec
DELETE FROM users 
WHERE user_id = $1
`

func (q *Queries) Deleteuser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteuser, userID)
	return err
}

const gettodos = `-- name: Gettodos :one
SELECT todo_id, user_id, title, time, date, completed FROM todos
WHERE todo_id = $1
ORDER BY todo_id
`

func (q *Queries) Gettodos(ctx context.Context, todoID int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, gettodos, todoID)
	var i Todo
	err := row.Scan(
		&i.TodoID,
		&i.UserID,
		&i.Title,
		&i.Time,
		&i.Date,
		&i.Completed,
	)
	return i, err
}

const getuser = `-- name: Getuser :one
SELECT user_id, first_name, last_name, user_name, email, password FROM users 
WHERE user_id = $1
`

func (q *Queries) Getuser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getuser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const listtodos = `-- name: Listtodos :many
SELECT todo_id, user_id, title, time, date, completed FROM todos
WHERE todo_id = $1
ORDER BY todo_id
`

func (q *Queries) Listtodos(ctx context.Context, todoID int64) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listtodos, todoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.TodoID,
			&i.UserID,
			&i.Title,
			&i.Time,
			&i.Date,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listuser = `-- name: Listuser :many
SELECT user_id, first_name, last_name, user_name, email, password FROM users 
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type ListuserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Listuser(ctx context.Context, arg ListuserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listuser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.UserName,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatetodos = `-- name: Updatetodos :one
UPDATE todos
SET title = $2, time = $3, date = $4
WHERE todo_id = $1
RETURNING todo_id, user_id, title, time, date, completed
`

type UpdatetodosParams struct {
	TodoID int64          `json:"todo_id"`
	Title  sql.NullString `json:"title"`
	Time   sql.NullString `json:"time"`
	Date   sql.NullString `json:"date"`
}

func (q *Queries) Updatetodos(ctx context.Context, arg UpdatetodosParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updatetodos,
		arg.TodoID,
		arg.Title,
		arg.Time,
		arg.Date,
	)
	var i Todo
	err := row.Scan(
		&i.TodoID,
		&i.UserID,
		&i.Title,
		&i.Time,
		&i.Date,
		&i.Completed,
	)
	return i, err
}

const updateuser = `-- name: Updateuser :one
UPDATE users 
SET first_name = $2, last_name = $3, user_name = $4
WHERE user_id = $1
RETURNING user_id, first_name, last_name, user_name, email, password
`

type UpdateuserParams struct {
	UserID    int64          `json:"user_id"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	UserName  sql.NullString `json:"user_name"`
}

func (q *Queries) Updateuser(ctx context.Context, arg UpdateuserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateuser,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.UserName,
		&i.Email,
		&i.Password,
	)
	return i, err
}
